import Head from "next/head";
import {useEffect, useState} from "react";
import {useRouter} from "next/router";


export default function ChatPage() {


    const [threads, setThreads] = useState(null)

    const router = useRouter();

    //When the component mounts, (when the Componend is rendered for the first time)
    useEffect(() => {

        console.log("ChatPage mounted");

        let token = localStorage.getItem("token");

        if (token == null) {
            window.location.href = "/login";
        }

        let threadsFromServer = [
            {
                id: 1,
                threadName: "My Thread 1",
                createdAt: "2025-03-01T10:00:00Z",
            },
            {
                id: 2,
                threadName: "hello thread",
                createdAt: "2025-03-02T10:00:00Z",
            },
            {
                id: 3,
                threadName: "Last Thread",
                createdAt: "2025-03-03T10:00:00Z",
            },
            {
                id: 3,
                threadName: "This is really the last thread",
                createdAt: "2025-03-03T10:00:00Z",
            },
        ]

        setThreads(threadsFromServer);



    }, []);

    const handleLogout = () => {
        localStorage.removeItem("token"); // üîê ŒîŒπŒ±Œ≥œÅŒ±œÜŒÆ JWT
        router.push("/login"); // ‚è© Redirect œÉœÑŒø login
    };

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="page-container">
                <header>
                    <div className="header-content">
                        <div className="header-brand">
                            <img src="./bootcamp-2025.03-logo.jpg" alt="Logo" className="header-logo"/>
                            <div className="header-title">Chat Application</div>
                        </div>
                        <div className="profile-dropdown">
                            <input type="checkbox" id="profile-toggle"/>
                            <label htmlFor="profile-toggle" className="profile-icon">U</label>
                            <div className="dropdown-menu">
                                <a href="/account">Profile</a>
                                <a href="/account">Settings</a>
                                <a href="#" onClick={handleLogout}>Logout</a>
                            </div>
                            <label htmlFor="profile-toggle" className="overlay"></label>
                        </div>
                    </div>
                </header>
                <div className="center-container">
                    <aside className="threads-list">
                        <h2>Threads</h2>
                        <div className="threads">
                            {/*<div className="thread-item active">Thread 1</div>*/}
                            {/*<div className="thread-item">Thread 2</div>*/}
                            {/*<div className="thread-item">Thread 3</div>*/}
                            {threads && threads.map((thread) => (
                                <div key={thread.id} className="thread-item">{thread.threadName}</div>
                            ))}

                            {/*
                        if(threads != null and threads.length > 0) {
                            for (let i = 0; i < threads.length; i++) {
                                let thread = threads[i];
                                return <div className="thread-item">{thread.threadName}</div>
                            }
                        }
                        */}

                        </div>
                    </aside>
                    <main className="main-container">
                        <div className="chat-window">
                            {/* Model selector centered in chat */}
                            <div className="chat-model-select">
                                <select id="model-select">
                                    <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                                    <option value="gpt-4">GPT-4</option>
                                    <option value="gpt-4-turbo">GPT-4 Turbo</option>
                                    <option value="custom-model">Custom Model...</option>
                                </select>
                            </div>
                            <div className="messages">
                                <div className="message bot">Hello! I‚Äôm ChatGPT‚Äîhow can I help you today?</div>
                                <div className="message user">Can you show me how this chat layout works?</div>
                            </div>
                            <div className="input-container">
                                <input type="text" placeholder="Type a message‚Ä¶"/>
                                <button>‚û§</button>
                            </div>
                        </div>
                    </main>
                </div>
                <footer>¬© 2025 Chat App, Inc.</footer>
            </div>
        </>
    );
}
